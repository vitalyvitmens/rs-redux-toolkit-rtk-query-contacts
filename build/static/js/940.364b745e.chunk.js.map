{"version":3,"file":"static/js/940.364b745e.chunk.js","mappings":"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","sources":["components/AddToFavorites/AddToFavorites.tsx","components/RemoveFromFavorites/RemoveFromFavorites.tsx","components/ContactCard/ContactCard.tsx","components/FilterForm/FilterForm.tsx","pages/ContactListPage/ContactListPage.tsx","redux/hooks.ts"],"sourcesContent":["import { useNavigate } from 'react-router-dom'\r\nimport { RoutePaths } from 'src/routes/RoutePaths'\r\nimport { addToFavorites } from 'src/redux/favorites'\r\nimport { useAppDispatch, useAppSelector } from 'src/redux/hooks'\r\nimport { ContactDto } from 'src/types/dto/ContactDto'\r\nimport { Colors } from 'src/constants/colors'\r\n\r\nexport const AddToFavorites: React.FC<{\r\n  contact: ContactDto\r\n}> = ({ contact }) => {\r\n  const dispatch = useAppDispatch()\r\n  const navigate = useNavigate()\r\n\r\n  const favorites = useAppSelector((state) => state.favorites)\r\n\r\n  let isInFavorites = favorites.favorites?.find(\r\n    (transaction) => transaction.id === contact.id\r\n  )\r\n    ? true\r\n    : false\r\n\r\n  const handleClick = () => {\r\n    if (isInFavorites) {\r\n      navigate(RoutePaths.Favorit)\r\n    } else {\r\n      dispatch(addToFavorites(contact))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div onClick={handleClick}>\r\n      <svg\r\n        className=\"heart\"\r\n        aria-hidden=\"true\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        fill={`${isInFavorites ? Colors.red : Colors.bisque}`}\r\n        height=\"35px\"\r\n        width=\"35px\"\r\n        viewBox=\"0 0 22 22\"\r\n        stroke={Colors.red}\r\n      >\r\n        <path d=\"m12.7 20.7 6.2-7.1c2.7-3 2.6-6.5.8-8.7A5 5 0 0 0 16 3c-1.3 0-2.7.4-4 1.4A6.3 6.3 0 0 0 8 3a5 5 0 0 0-3.7 1.9c-1.8 2.2-2 5.8.8 8.7l6.2 7a1 1 0 0 0 1.4 0Z\" />\r\n      </svg>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { removeFromFavorites } from 'src/redux/favorites'\r\nimport { useAppDispatch } from 'src/redux/hooks'\r\nimport { ContactDto } from 'src/types/dto/ContactDto'\r\nimport { Colors } from 'src/constants/colors'\r\n\r\nexport const RemoveFromFavorites: React.FC<{ id: ContactDto['id'] }> = ({\r\n  id,\r\n}) => {\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleClick = () => dispatch(removeFromFavorites(id))\r\n\r\n  return (\r\n    <div onClick={handleClick}>\r\n      <svg\r\n        className=\"heart\"\r\n        aria-hidden=\"true\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        fill={Colors.red}\r\n        height=\"35px\"\r\n        width=\"35px\"\r\n        viewBox=\"0 0 140 140\"\r\n        stroke={Colors.red}\r\n      >\r\n        <path d=\"M73.13,93.77,59.58,107.21,44,92.19c-2.43-2.35-5.25-4.92-8.18-7.59C19.93,70.14.79,52.69,0,31.09l0-1.65A28.51,28.51,0,0,1,9,8.54,31.68,31.68,0,0,1,29.57.31l1.71,0c13.72.18,20,6.2,28.18,14.24C66.21,7.38,71.81,1.52,83.21.21a33.07,33.07,0,0,1,18.62,3.37,34.41,34.41,0,0,1,12.24,10.25,31,31,0,0,1,6,14.86A30.55,30.55,0,0,1,116.82,46c-.41.8-.88,1.65-1.39,2.52l-.45.74A30.65,30.65,0,0,1,73.13,93.77Zm30.73-27.85a3.87,3.87,0,0,1,1.48.29,3.92,3.92,0,0,1,1.26.84,4,4,0,0,1,.84,1.25l0,.07a3.78,3.78,0,0,1,.28,1.35v.15a3.86,3.86,0,0,1-.29,1.41,4.15,4.15,0,0,1-.84,1.26,3.7,3.7,0,0,1-1.25.83l-.07,0a4,4,0,0,1-1.39.28H80.6a3.87,3.87,0,0,1-1.48-.3l-.06,0a3.58,3.58,0,0,1-1.2-.81A3.87,3.87,0,0,1,77,71.3l0-.07a4,4,0,0,1-.28-1.4v0A4,4,0,0,1,77,68.33a3.86,3.86,0,0,1,.84-1.27,4,4,0,0,1,1.25-.83,3.71,3.71,0,0,1,1.47-.3Zm6.19-21.06c.34-.58.67-1.17,1-1.76a24.13,24.13,0,0,0,2.56-13.67,24.39,24.39,0,0,0-4.72-11.73,27.78,27.78,0,0,0-9.92-8.31A26.62,26.62,0,0,0,84,6.68c-9.13,1-14,6.2-19.9,12.47l-4.43,4.64L55.2,19.45c-7.27-7.14-12.74-12.52-24-12.67l-1.4,0a25.21,25.21,0,0,0-16.36,6.5A22.12,22.12,0,0,0,6.49,29.52l0,1.34c.67,18.85,18.72,35.3,33.67,48.93,2.89,2.63,5.67,5.16,8.32,7.72l11,10.61,9-8.91a30.66,30.66,0,0,1,41.55-44.35Zm-.76,7.87a24.14,24.14,0,1,0,7.07,17.07,24.06,24.06,0,0,0-7.07-17.07Z\" />\r\n      </svg>\r\n    </div>\r\n  )\r\n}\r\n","import { memo } from 'react'\r\nimport { Link, useLocation } from 'react-router-dom'\r\nimport { RoutePaths } from 'src/routes/RoutePaths'\r\nimport { AddToFavorites } from '../AddToFavorites/AddToFavorites'\r\nimport { RemoveFromFavorites } from '../RemoveFromFavorites/RemoveFromFavorites'\r\nimport { ContactDto } from 'src/types/dto/ContactDto'\r\nimport { Colors } from 'src/constants/colors'\r\nimport { Card, ListGroup } from 'react-bootstrap'\r\nimport '../components.css'\r\n\r\ninterface ContactCardProps {\r\n  contact: ContactDto\r\n  withLink?: boolean\r\n}\r\n\r\nexport const ContactCard = memo<ContactCardProps>(({ contact, withLink }) => {\r\n  const { photo, id, name, phone, birthday, address } = contact\r\n  const location = useLocation()\r\n\r\n  return (\r\n    <Card\r\n      key={id}\r\n      style={{\r\n        textShadow: `1px 1px 1px ${Colors.black}`,\r\n        border: `1px solid Colors.bisque`,\r\n        boxShadow: `0 -2px 5px ${Colors.black}`,\r\n      }}\r\n    >\r\n      <Card.Img variant=\"top\" src={photo} />\r\n      <Card.Body style={{ borderRadius: '5px', background: Colors.bisque }}>\r\n        <Card.Body\r\n          style={{\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n          }}\r\n        >\r\n          <Card.Title\r\n            style={{\r\n              color: Colors.blue,\r\n            }}\r\n          >\r\n            {withLink ? (\r\n              <Link\r\n                style={{\r\n                  fontWeight: '700',\r\n                  textShadow: `1px 1px 1px ${Colors.black}`,\r\n                }}\r\n                to={`${RoutePaths.Contacts}/${id}`}\r\n              >\r\n                <div className=\"text-truncate\">{name}</div>\r\n              </Link>\r\n            ) : (\r\n              name\r\n            )}\r\n          </Card.Title>\r\n          {location.pathname === RoutePaths.Favorit ? (\r\n            <RemoveFromFavorites id={contact.id} />\r\n          ) : (\r\n            <AddToFavorites contact={contact} />\r\n          )}\r\n        </Card.Body>\r\n        <Card.Body>\r\n          <ListGroup>\r\n            <ListGroup.Item\r\n              style={{\r\n                background: Colors.bisque,\r\n                boxShadow: `0 -2px 5px ${Colors.black}`,\r\n              }}\r\n            >\r\n              <Link to={`tel:${phone}`} target=\"_blank\">\r\n                {phone}\r\n              </Link>\r\n            </ListGroup.Item>\r\n            <ListGroup.Item\r\n              style={{\r\n                color: Colors.green,\r\n                fontWeight: '600',\r\n                background: Colors.bisque,\r\n                boxShadow: `0 -2px 5px ${Colors.black}`,\r\n              }}\r\n            >\r\n              {birthday}\r\n            </ListGroup.Item>\r\n            <ListGroup.Item\r\n              style={{\r\n                color: Colors.red,\r\n                textShadow: `-1px 1px 1px ${Colors.black}`,\r\n                background: Colors.bisque,\r\n                boxShadow: `0 -2px 5px ${Colors.black}`,\r\n              }}\r\n            >\r\n              {address}\r\n            </ListGroup.Item>\r\n          </ListGroup>\r\n        </Card.Body>\r\n      </Card.Body>\r\n    </Card>\r\n  )\r\n})\r\n","import { memo, Suspense } from 'react'\r\nimport { Formik } from 'formik'\r\nimport { FormikConfig } from 'formik/dist/types'\r\nimport { GroupContactsDto } from 'src/types/dto/GroupContactsDto'\r\nimport { Colors } from 'src/constants/colors'\r\nimport { Button, Col, Form, InputGroup, Row } from 'react-bootstrap'\r\n\r\nexport interface FilterFormValues {\r\n  name: string\r\n  groupId: string\r\n}\r\n\r\ninterface FilterFormProps extends FormikConfig<Partial<FilterFormValues>> {\r\n  groupContactsList: GroupContactsDto[]\r\n}\r\n\r\nexport const FilterForm = memo<FilterFormProps>(\r\n  ({ onSubmit, initialValues = {}, groupContactsList }) => {\r\n    return (\r\n      <Formik initialValues={initialValues} onSubmit={onSubmit}>\r\n        {({ handleChange, handleSubmit }) => (\r\n          <Form onSubmit={handleSubmit} onChange={handleSubmit}>\r\n            <Row xxl={4} className=\"g-4\">\r\n              <Col>\r\n                <Suspense>\r\n                  <InputGroup className=\"mb-3\">\r\n                    <Form.Control\r\n                      style={{\r\n                        boxShadow: `0 2px 5px ${Colors.black}`,\r\n                        background: Colors.bisque,\r\n                        color: Colors.green,\r\n                        fontWeight: '600',\r\n                        fontSize: '1.2rem',\r\n                        textShadow: `1px 1px 1px ${Colors.black}`,\r\n                      }}\r\n                      id={'name'}\r\n                      name={'name'}\r\n                      autoComplete=\"name\"\r\n                      placeholder=\"name\"\r\n                      aria-label=\"name\"\r\n                      onChange={handleChange}\r\n                    />\r\n                  </InputGroup>\r\n                </Suspense>\r\n              </Col>\r\n              <Col>\r\n                <Form.Select\r\n                  style={{\r\n                    boxShadow: `0 2px 5px ${Colors.black}`,\r\n                    background: Colors.bisque,\r\n                    color: Colors.green,\r\n                    fontWeight: '600',\r\n                    fontSize: '1.2rem',\r\n                    textShadow: `1px 1px 1px ${Colors.black}`,\r\n                  }}\r\n                  id={'groupId'}\r\n                  name={'groupId'}\r\n                  aria-label=\"Поиск по группе\"\r\n                  onChange={handleChange}\r\n                >\r\n                  <option>Open this select menu</option>\r\n                  {groupContactsList.map((groupContacts) => (\r\n                    <option value={groupContacts.id} key={groupContacts.id}>\r\n                      {groupContacts.name}\r\n                    </option>\r\n                  ))}\r\n                </Form.Select>\r\n              </Col>\r\n              <Col>\r\n                <Button variant={'primary'} type={'submit'}>\r\n                  Применить\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    )\r\n  }\r\n)\r\n","import { Suspense, useEffect, useState } from 'react'\r\nimport { ContactCard } from 'src/components/ContactCard/ContactCard'\r\nimport {\r\n  FilterForm,\r\n  FilterFormValues,\r\n} from 'src/components/FilterForm/FilterForm'\r\nimport { ContactDto } from 'src/types/dto/ContactDto'\r\nimport { Col, Row, Spinner } from 'react-bootstrap'\r\nimport { useGetContactsQuery } from 'src/redux/contacts'\r\nimport { useGetGroupContactsQuery } from 'src/redux/groups'\r\n\r\nexport const ContactListPage = () => {\r\n  const [filteredContacts, setFilteredContacts] = useState<ContactDto[]>([])\r\n  const { data: contacts, isLoading } = useGetContactsQuery()\r\n  const { data: groups, isLoading: isLoadingGroups } =\r\n    useGetGroupContactsQuery()\r\n\r\n  useEffect(() => {\r\n    if (contacts) {\r\n      setFilteredContacts(contacts)\r\n    }\r\n  }, [contacts, groups])\r\n\r\n  const handleFilter = (filterValues: Partial<FilterFormValues>) => {\r\n    if (!contacts || !groups) {\r\n      return\r\n    }\r\n\r\n    const filtered = contacts.filter((contact) => {\r\n      const nameMatch =\r\n        !filterValues.name ||\r\n        contact.name.toLowerCase().includes(filterValues.name.toLowerCase())\r\n      const groupMatch =\r\n        !filterValues.groupId ||\r\n        groups.some(\r\n          (group) =>\r\n            group.id === filterValues.groupId &&\r\n            group.contactIds.includes(contact.id)\r\n        )\r\n      return nameMatch && groupMatch\r\n    })\r\n\r\n    setFilteredContacts(filtered)\r\n  }\r\n  \r\n  if (isLoading || isLoadingGroups) return <Spinner animation=\"border\" />\r\n  if (!groups || !filteredContacts) return null\r\n\r\n  return (\r\n    <Row xxl={1}>\r\n      <Col className=\"mb-3\">\r\n        <Suspense fallback={<Spinner animation=\"border\" />}>\r\n          <FilterForm\r\n            groupContactsList={groups}\r\n            onSubmit={handleFilter}\r\n            initialValues={{}}\r\n          />\r\n        </Suspense>\r\n      </Col>\r\n      <Col>\r\n        <Row xxl={4} className=\"g-4\">\r\n          {filteredContacts?.map((contact) => (\r\n            <Col key={contact.id}>\r\n              <Suspense fallback={<Spinner animation=\"border\" />}>\r\n                <ContactCard contact={contact} withLink />\r\n              </Suspense>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n","import { AnyAction } from 'redux'\r\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport { ThunkDispatch } from 'redux-thunk'\r\nimport { RootState } from './store'\r\n\r\nexport const useAppDispatch = useDispatch<\r\n  ThunkDispatch<RootState, void, AnyAction>\r\n>\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\r\n"],"names":["AddToFavorites","_ref","_favorites$favorites","contact","dispatch","useAppDispatch","navigate","useNavigate","isInFavorites","useAppSelector","state","favorites","find","transaction","id","_jsx","onClick","handleClick","RoutePaths","addToFavorites","children","className","xmlns","fill","concat","Colors","height","width","viewBox","stroke","d","RemoveFromFavorites","removeFromFavorites","ContactCard","memo","withLink","photo","name","phone","birthday","address","location","useLocation","_jsxs","Card","style","textShadow","border","boxShadow","variant","src","borderRadius","background","display","justifyContent","color","Link","fontWeight","to","pathname","ListGroup","target","FilterForm","onSubmit","initialValues","groupContactsList","Formik","_ref2","handleChange","handleSubmit","Form","onChange","Row","xxl","Col","Suspense","InputGroup","fontSize","autoComplete","placeholder","map","groupContacts","value","Button","type","ContactListPage","filteredContacts","setFilteredContacts","useState","data","contacts","isLoading","useGetContactsQuery","groups","isLoadingGroups","useGetGroupContactsQuery","useEffect","Spinner","animation","fallback","filterValues","filtered","filter","nameMatch","toLowerCase","includes","groupMatch","groupId","some","group","contactIds","useDispatch","useSelector"],"sourceRoot":""}