{"version":3,"file":"static/js/325.b55bffad.chunk.js","mappings":"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","sources":["components/GroupContactsCard/GroupContactsCard.tsx","pages/GroupListPage/GroupListPage.tsx","../node_modules/react-bootstrap/esm/Col.js","../node_modules/react-bootstrap/esm/Row.js","../node_modules/react-bootstrap/esm/Spinner.js"],"sourcesContent":["import { memo } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { RoutePaths } from 'src/routes/RoutePaths'\r\nimport { GroupContactsDto } from 'src/types/dto/GroupContactsDto'\r\nimport { Colors } from 'src/constants/colors'\r\nimport { Card } from 'react-bootstrap'\r\nimport '../components.css'\r\n\r\ninterface GroupContactsCardProps {\r\n  groupContacts: GroupContactsDto\r\n  withLink?: boolean\r\n}\r\n\r\nexport const GroupContactsCard = memo<GroupContactsCardProps>(\r\n  ({\r\n    groupContacts: { id, name, description, photo, contactIds },\r\n    withLink,\r\n  }) => {\r\n    return (\r\n      <Card\r\n        key={id}\r\n        style={{\r\n          marginBottom: '1.5rem',\r\n          border: `1px solid Colors.bisque`,\r\n          background: Colors.bisque,\r\n          boxShadow: `-4px 3px 8px ${Colors.black}`,\r\n        }}\r\n      >\r\n        <Card.Header\r\n          style={{\r\n            fontWeight: '700',\r\n            boxShadow: `0 1px 5px ${Colors.black}`,\r\n            textShadow: `1px 1px 1px ${Colors.black}`,\r\n          }}\r\n        >\r\n          {withLink ? (\r\n            <Link to={`${RoutePaths.Groups}/${id}`}>{name}</Link>\r\n          ) : (\r\n            name\r\n          )}\r\n        </Card.Header>\r\n        <Card.Body style={{ color: Colors.green, fontWeight: '600' }}>\r\n          <div className=\"row-truncate\">{description}</div>\r\n        </Card.Body>\r\n        <Card.Img\r\n          style={{ boxShadow: `0 -2px 5px ${Colors.black}` }}\r\n          variant=\"top\"\r\n          src={photo}\r\n        />\r\n        <Card.Footer\r\n          style={{\r\n            color: Colors.red,\r\n            textShadow: `-1px 1px 1px ${Colors.black}`,\r\n          }}\r\n        >\r\n          Contacts: {contactIds.length}\r\n        </Card.Footer>\r\n      </Card>\r\n    )\r\n  }\r\n)\r\n","import { GroupContactsCard } from 'src/components/GroupContactsCard/GroupContactsCard'\r\nimport { Col, Row, Spinner } from 'react-bootstrap'\r\nimport { useGetGroupContactsQuery } from 'src/redux/groups'\r\n\r\nexport const GroupListPage = () => {\r\n  const { data: groups, isLoading } = useGetGroupContactsQuery()\r\n\r\n  if (isLoading) {\r\n    return <Spinner animation=\"border\" />\r\n  } else if (!groups) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Row xxl={4}>\r\n      {groups.map((groupContacts) => (\r\n        <Col key={groupContacts.id}>\r\n          <GroupContactsCard groupContacts={groupContacts} withLink />\r\n        </Col>\r\n      ))}\r\n    </Row>\r\n  )\r\n}\r\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints, useBootstrapMinBreakpoint } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function useCol({\n  as,\n  bsPrefix,\n  className,\n  ...props\n}) {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'col');\n  const breakpoints = useBootstrapBreakpoints();\n  const minBreakpoint = useBootstrapMinBreakpoint();\n  const spans = [];\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let span;\n    let offset;\n    let order;\n    if (typeof propValue === 'object' && propValue != null) {\n      ({\n        span,\n        offset,\n        order\n      } = propValue);\n    } else {\n      span = propValue;\n    }\n    const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : '';\n    if (span) spans.push(span === true ? `${bsPrefix}${infix}` : `${bsPrefix}${infix}-${span}`);\n    if (order != null) classes.push(`order${infix}-${order}`);\n    if (offset != null) classes.push(`offset${infix}-${offset}`);\n  });\n  return [{\n    ...props,\n    className: classNames(className, ...spans, ...classes)\n  }, {\n    as,\n    bsPrefix,\n    spans\n  }];\n}\nconst Col = /*#__PURE__*/React.forwardRef(\n// Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n(props, ref) => {\n  const [{\n    className,\n    ...colProps\n  }, {\n    as: Component = 'div',\n    bsPrefix,\n    spans\n  }] = useCol(props);\n  return /*#__PURE__*/_jsx(Component, {\n    ...colProps,\n    ref: ref,\n    className: classNames(className, !spans.length && bsPrefix)\n  });\n});\nCol.displayName = 'Col';\nexport default Col;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints, useBootstrapMinBreakpoint } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const breakpoints = useBootstrapBreakpoints();\n  const minBreakpoint = useBootstrapMinBreakpoint();\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n    const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, ...classes)\n  });\n});\nRow.displayName = 'Row';\nexport default Row;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Spinner = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  variant,\n  animation = 'border',\n  size,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  className,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'spinner');\n  const bsSpinnerPrefix = `${bsPrefix}-${animation}`;\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, bsSpinnerPrefix, size && `${bsSpinnerPrefix}-${size}`, variant && `text-${variant}`)\n  });\n});\nSpinner.displayName = 'Spinner';\nexport default Spinner;"],"names":["GroupContactsCard","memo","_ref","groupContacts","id","name","description","photo","contactIds","withLink","_jsxs","Card","style","marginBottom","border","background","Colors","boxShadow","concat","children","_jsx","fontWeight","textShadow","Link","to","RoutePaths","color","className","variant","src","length","GroupListPage","data","groups","isLoading","useGetGroupContactsQuery","Spinner","animation","Row","xxl","map","Col","React","props","ref","colProps","as","Component","bsPrefix","spans","useBootstrapPrefix","breakpoints","useBootstrapBreakpoints","minBreakpoint","useBootstrapMinBreakpoint","classes","forEach","brkPoint","propValue","span","offset","order","infix","push","classNames","useCol","displayName","decoratedBsPrefix","sizePrefix","cols","size","bsSpinnerPrefix"],"sourceRoot":""}